@using System.Text.Encodings.Web
@using Nop.Core
@using Nop.Core.Infrastructure;
@using Nop.Services.Configuration
@model CustomerInfoModel
@inject Nop.Core.IWebHelper webHelper
@inject IStoreContext storeContext;
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
    //page class
    Html.AppendPageCssClassParts("html-account-page");
    Html.AppendPageCssClassParts("html-customer-info-page");
    var esApi = EngineContext.Current.Resolve<ISettingService>().GetSettingByKey("api.info".ToLower(), string.Empty, 0, false);

}

@section left
    {
    @await Component.InvokeAsync("CustomerNavigation", new { selectedTabId = CustomerNavigationEnum.Info })
}

@section accountPageTitle
    {

    @if (!string.IsNullOrWhiteSpace(esApi) && Convert.ToBoolean(esApi))
    {
        <div class="page-title">
            <h1>@T("Account.Confimr") - @T("Account.CustomerInfoConfimr")</h1>
        </div>

    }
    else
    {
        <div class="page-title">
            <h1>@T("Account.MyAccount") - @T("Account.CustomerInfo")</h1>
        </div>
    }
}

<!--CSS utilizados por intlTelInput para telefonos con formatos y banderas intenacionales-->
<link href="~/Themes/Emporium/Content/intltelinput/css/intlTelInput.css" rel="stylesheet" type="text/css">
<link href="~/Themes/Emporium/Content/intltelinput/css/demo.css" rel="stylesheet" type="text/css">

<style>
    .iti.iti--allow-dropdown {
        width: 100%;
    }

    .center-2 {
        width: 70%;
    }

    #phone2 {
        width: 100%;
    }

    #phoneLabelCol {
        text-align: left !important;
    }

        #phoneLabelCol > label {
            display: inline-block;
            max-width: calc(100% - 10px);
            width: auto;
            font-size: 15px;
            margin: 0 0 8px;
            font-weight: bold;
            color: #444;
            text-align: left;
            white-space: normal;
        }

    #phoneRequiredCol {
        text-align: right !important;
    }
</style>

@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript" asp-location="Footer">

        $(document).ready(function () {
            $("#@Html.IdFor(model => model.CountryId)").on('change', function () {
            var selectedItem = $(this).val();
            var ddlStates = $("#@Html.IdFor(model => model.StateProvinceId)");
            var statesProgress = $("#states-loading-progress");
            statesProgress.show();
                $.ajax({
                cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                    data: { "countryId": selectedItem, "addSelectStateItem": "true" },
                    success: function (data) {
                    ddlStates.html('');
                        $.each(data, function (id, option) {
                        ddlStates.append($('<option></option>').val(option.id).html(option.name));
                    });
                    statesProgress.hide();
                },
                    error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve states.');
                    statesProgress.hide();
                }
            });
        });
    });
    </script>
}

<div class="page account-page customer-info-page">
    <div class="page-body">
        <form asp-route="CustomerInfo" method="post" onsubmit="return checkForm()">
            <div asp-validation-summary="ModelOnly" class="message-error"></div>
            <div class="fieldset">
                <div class="title">
                    <strong>@T("Account.YourPersonalDetails")</strong>
                </div>
                <div class="form-fields">
                    @if (Model.GenderEnabled)
                    {
                        <div class="inputs">
                            <label>@T("Account.Fields.Gender"):</label>
                            <div class="gender">
                                <span class="male">
                                    <input type="radio" asp-for="Gender" value="M" checked="@(Model.Gender == "M")" id="gender-male" />
                                    <label class="forcheckbox" for="gender-male">@T("Account.Fields.Gender.Male")</label>
                                </span>
                                <span class="female">
                                    <input type="radio" asp-for="Gender" value="F" checked="@(Model.Gender == "F")" id="gender-female" />
                                    <label class="forcheckbox" for="gender-female">@T("Account.Fields.Gender.Female")</label>
                                </span>
                            </div>
                        </div>
                    }
                    <div class="inputs" style="display:none">
                        <label asp-for="FirstName" asp-postfix=":"></label>
                        <input asp-for="FirstName" />
                        <nop-required />
                        <span asp-validation-for="FirstName" id="FirstNameValidate"></span>
                    </div>
                    <div class="inputs" style="display:none">
                        <label asp-for="LastName" asp-postfix=":"></label>
                        <input asp-for="LastName" />
                        <nop-required />
                        <span asp-validation-for="LastName" id="LastNameValidate"></span>
                    </div>
                    @if (Model.DateOfBirthEnabled)
                    {
                        <div class="inputs date-of-birth">
                            <label>@T("Account.Fields.DateOfBirth"):</label>
                            <nop-date-picker asp-day-name="@Html.NameFor(x => x.DateOfBirthDay)"
                                             asp-month-name="@Html.NameFor(x => x.DateOfBirthMonth)"
                                             asp-year-name="@Html.NameFor(x => x.DateOfBirthYear)"
                                             asp-begin-year="@(DateTime.Now.Year - 110)"
                                             asp-end-year="@(DateTime.Now.Year)"
                                             asp-selected-day="@Model.DateOfBirthDay"
                                             asp-selected-month="@Model.DateOfBirthMonth"
                                             asp-selected-year="@Model.DateOfBirthYear" />
                            @if (Model.DateOfBirthRequired)
                            {
                                <nop-required />
                            }
                            <span asp-validation-for="DateOfBirthDay"></span>
                            <span asp-validation-for="DateOfBirthMonth"></span>
                            <span asp-validation-for="DateOfBirthYear"></span>
                        </div>
                    }
                    <div class="inputs">
                        <label asp-for="Email" asp-postfix=":"></label>
                        <input asp-for="Email" readonly />
                        <nop-required />
                        <span asp-validation-for="Email"></span>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.EmailToRevalidate))
                    {
                        <div class="inputs">
                            <label asp-for="EmailToRevalidate"></label>
                            <span class="email-to-revalidate">@Model.EmailToRevalidate</span>
                            <span class="email-to-revalidate-note">
                                <em>@T("Account.Fields.EmailToRevalidate.Note")</em>
                            </span>
                        </div>
                    }
                    @if (Model.UsernamesEnabled)
                    {
                        if (Model.AllowUsersToChangeUsernames)
                        {
                            <div class="inputs">
                                <label asp-for="Username" asp-postfix=":"></label>
                                <input asp-for="Username" />
                                <nop-required />
                                @if (Model.CheckUsernameAvailabilityEnabled)
                                {
                                    @await Html.PartialAsync("_CheckUsernameAvailability")
                                }
                                <span asp-validation-for="Username"></span>
                            </div>
                        }
                        else
                        {
                            <div class="inputs">
                                <label asp-for="Username" asp-postfix=":"></label>
                                <span class="readonly-username">@Model.Username</span>
                            </div>
                        }
                    }
                </div>
            </div>
            @if (Model.CompanyEnabled || Model.DisplayVatNumber)
            {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.CompanyDetails")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.CompanyEnabled)
                        {
                            <div class="inputs">
                                <label asp-for="Company" asp-postfix=":"></label>
                                <input asp-for="Company" />
                                @if (Model.CompanyRequired)
                                {
                                    <nop-required />
                                }
                                <span asp-validation-for="Company"></span>
                            </div>
                        }
                        @if (Model.DisplayVatNumber)
                        {
                            <div class="inputs">
                                <label asp-for="VatNumber" asp-postfix=":"></label>
                                <input asp-for="VatNumber" />
                                <span class="vat-status">@Model.VatNumberStatusNote</span>
                                <span class="vat-note">
                                    <em>@T("Account.Fields.VatNumber.Note")</em>
                                </span>
                            </div>
                        }
                    </div>
                </div>
            }
            @if (Model.NewsletterEnabled || Model.CustomerAttributes.Count > 0)
            {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.Options")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.NewsletterEnabled)
                        {
                            <div class="inputs">
                                <input asp-for="Newsletter" />
                                <label asp-for="Newsletter"></label>
                                <span asp-validation-for="Newsletter"></span>
                            </div>
                        }
                        @if (Model.CustomerAttributes.Count > 0)
                        {
                            @await Html.PartialAsync("_CustomerAttributesInfo", Model.CustomerAttributes)
                        }
                    </div>
                </div>
            }
            @if (Model.PhoneEnabled || Model.FaxEnabled)
            {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.YourContactInformation")</strong>
                    </div>
                    <div class="form-fields">
                        @*@if (Model.PhoneEnabled)
                            {
                                <div class="inputs">
                                    <label asp-for="Phone" asp-postfix=":"></label>
                                    <input asp-for="Phone" onblur="numberPhone()" />
                                    @if (Model.PhoneRequired)
                                    {
                                        <nop-required />
                                    }
                                    <span asp-validation-for="Phone" id="PhoneValidate"></span>
                                </div>
                            }*@
                        @if (Model.PhoneEnabled)
                        {
                            <div class="row">
                                <div class="col-6" id="phoneLabelCol">
                                    <label asp-for="Phone" asp-postfix=":"></label>
                                </div>
                                <div class="col-6" id="phoneRequiredCol">
                                    @if (Model.PhoneRequired)
                                    {
                                        <nop-required />
                                    }
                                </div>
                            </div>
                            <input asp-for="Phone" id="phone2" name="phone2" onblur="numberPhone()" placeholder="4241234567" />
                            @*<input asp-for="Phone" id="phone" name="phone" placeholder="4241234567" />*@
                            <span asp-validation-for="Phone" id="PhoneValidate"></span>
                            <span>@T("Register.Mensaje.ValidatePhone") </span>
                            <input asp-for="Phone" id="phone" name="phone" placeholder="4241234567" hidden />
                        }
                        @if (Model.FaxEnabled)
                        {
                            <div class="inputs">
                                <label asp-for="Fax" asp-postfix=":"></label>
                                <input asp-for="Fax" />
                                @if (Model.FaxRequired)
                                {
                                    <nop-required />
                                }
                                <span asp-validation-for="Fax"></span>
                            </div>
                        }
                    </div>
                </div>
            }
            @if (Model.StreetAddressEnabled ||
          Model.StreetAddress2Enabled ||
          Model.ZipPostalCodeEnabled ||
          Model.CityEnabled ||
          Model.CountyEnabled ||
          Model.CountryEnabled)
            {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.YourAddress")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.StreetAddressEnabled)
                        {
                            <div class="inputs">
                                <label asp-for="StreetAddress" asp-postfix=":"></label>
                                <input asp-for="StreetAddress" onblur="alphanumericAddress(this, 'La')" />
                                @if (Model.StreetAddressRequired)
                                {
                                    <nop-required />
                                }
                                <span asp-validation-for="StreetAddress" id="StreetAddressValidate"></span>
                            </div>
                        }
                        @if (Model.StreetAddress2Enabled)
                        {
                            <div class="inputs">
                                <label asp-for="StreetAddress2" asp-postfix=":"></label>
                                <input asp-for="StreetAddress2" onblur="alphanumericAddress(this, 'La')" />
                                @if (Model.StreetAddress2Required)
                                {
                                    <nop-required />
                                }
                                <span asp-validation-for="StreetAddress2" id="StreetAddress2Validate"></span>
                            </div>
                        }
                        @if (Model.ZipPostalCodeEnabled)
                        {
                            <div class="inputs">
                                <label asp-for="ZipPostalCode" asp-postfix=":"></label>
                                <input asp-for="ZipPostalCode" />
                                @if (Model.ZipPostalCodeRequired)
                                {
                                    <nop-required />
                                }
                                <span asp-validation-for="ZipPostalCode"></span>
                            </div>
                        }
                        @if (Model.CityEnabled)
                        {
                            <div class="inputs">
                                <label asp-for="City" asp-postfix=":"></label>
                                <input asp-for="City" onblur="alphanumeric(this, 'La')" />
                                @if (Model.CityRequired)
                                {
                                    <nop-required />
                                }
                                <span asp-validation-for="City" id="CityValidate"></span>
                            </div>
                        }
                        @if (Model.CountyEnabled)
                        {
                            <div class="inputs">
                                <label asp-for="County" asp-postfix=":"></label>
                                <input asp-for="County" />
                                @if (Model.CountyRequired)
                                {
                                    <nop-required />
                                }
                                <span asp-validation-for="County"></span>
                            </div>
                        }
                        @if (Model.CountryEnabled)
                        {
                            <div class="inputs">
                                <label asp-for="CountryId" asp-postfix=":"></label>
                                <select asp-for="CountryId" asp-items="Model.AvailableCountries"></select>
                                @if (Model.CountryRequired)
                                {
                                    <nop-required />
                                }
                                <span asp-validation-for="CountryId"></span>
                            </div>
                        }
                        @if (Model.CountryEnabled && Model.StateProvinceEnabled)
                        {
                            <div class="inputs">
                                <label asp-for="StateProvinceId" asp-postfix=":"></label>
                                <select asp-for="StateProvinceId" asp-items="Model.AvailableStates"></select>
                                @if (Model.StateProvinceRequired)
                                {
                                    <nop-required />
                                }
                                <span asp-validation-for="StateProvinceId"></span>
                                <span id="states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                            </div>
                        }
                    </div>
                </div>
            }
            @*@if (Model.AllowCustomersToSetTimeZone || Model.SignatureEnabled)
                {
                    <div class="fieldset">
                        <div class="title">
                            <strong>@T("Account.Preferences")</strong>
                        </div>
                        <div class="form-fields">
                            @if (Model.AllowCustomersToSetTimeZone)
                            {
                                <div class="inputs">
                                    <label asp-for="TimeZoneId" asp-postfix=":"></label>
                                    <select asp-for="TimeZoneId" asp-items="Model.AvailableTimeZones"></select>
                                    <span asp-validation-for="TimeZoneId"></span>
                                </div>
                            }
                            @if (Model.SignatureEnabled)
                            {
                                <div class="inputs">
                                    <label asp-for="Signature" asp-postfix=":"></label>
                                    <textarea asp-for="Signature" class="account-signature-text"></textarea>
                                </div>
                            }
                        </div>
                    </div>
                }*@
            @if (Model.NumberOfExternalAuthenticationProviders > 0)
            {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.AssociatedExternalAuth")</strong>
                    </div>
                    @if (Model.AssociatedExternalAuthRecords.Count > 0)
                    {
                        //existing associated external records
                        <div class="table-wrapper">
                            <table class="data-table">
                                <colgroup>
                                    <col />
                                    <col />
                                    <col />
                                </colgroup>
                                <thead>
                                    <tr>
                                        <th class="auth-method-name">
                                            @T("Account.AssociatedExternalAuth.AuthMethodName")
                                        </th>
                                        <th class="email">
                                            @T("Account.AssociatedExternalAuth.Email")
                                        </th>
                                        <th class="external-id">
                                            @T("Account.AssociatedExternalAuth.ExternalIdentifier")
                                        </th>
                                        @if (Model.AllowCustomersToRemoveAssociations)
                                        {
                                            <th class="remove">
                                                @T("Account.AssociatedExternalAuth.Remove")
                                            </th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.AssociatedExternalAuthRecords)
                                    {
                                        <tr>
                                            <td class="auth-method-name">
                                                @item.AuthMethodName
                                            </td>
                                            <td class="email">
                                                @item.Email
                                            </td>
                                            <td class="external-id">
                                                @CommonHelper.EnsureMaximumLength(item.ExternalIdentifier, 40, "...")
                                            </td>
                                            @if (Model.AllowCustomersToRemoveAssociations)
                                            {
                                                <td class="remove">
                                                    <a href="#" onclick="return removeexternalassociation(@item.Id)">@T("Account.AssociatedExternalAuth.Remove")</a>
                                                </td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    @if (Model.NumberOfExternalAuthenticationProviders > Model.AssociatedExternalAuthRecords.Count)
                    {
                        //we can add more external records
                        var loginUrl = Url.RouteUrl("Login", null, webHelper.CurrentRequestProtocol);
                        <div class="form-fields add-more-external-records">
                            @T("Account.AssociatedExternalAuth.AddMoreRecords")
                            <a href="@loginUrl">@loginUrl</a>
                        </div>
                    }
                </div>
            }
            @if (Model.GdprConsents.Count > 0)
            {
                <div class="fieldset">
                    <div class="form-fields">
                        @foreach (var consent in Model.GdprConsents)
                        {
                            if (consent.IsRequired)
                            {
                                <script asp-location="Footer">
                                    $(document).ready(function() {
                                        $('#save-info-button').on('click', function() {
                                            if ($('#consent@(consent.Id)').is(':checked')) {
                                                    //do some stuff
                                                    return true;
                                                } else {
                                                    //just show validation errors, don't post
                                               alert('@Html.Raw(JavaScriptEncoder.Default.Encode(consent.RequiredMessage))');
                                                    return false;
                                                }
                                            });
                                        });
                                </script>
                            }
                            <div class="inputs accept-consent">
                                <input id="consent@(consent.Id)" type="checkbox" name="consent@(consent.Id)" checked="@consent.Accepted" />
                                <label for="consent@(consent.Id)">@consent.Message</label>
                            </div>
                        }
                    </div>
                </div>
            }
        <div class="buttons">

            @if (!string.IsNullOrWhiteSpace(esApi.ToString()) && Convert.ToBoolean(esApi))
            {
                <input type="submit" id="save-info-button" value="@T("Common.Confirm")" name="save-info-button" class="button-1 save-customer-info-button" />
            }
            else
            {
                <input type="submit" id="save-info-button" value="@T("Common.Save")" name="save-info-button" class="button-1 save-customer-info-button" />
            }

        </div>
        </form>
    </div>
</div>

@*<div id="paypal-button-container"></div>
    <script src="https://www.paypal.com/sdk/js?client-id=AX2irOtx9WAr6aGkNxUftuismSmoY6MEw2OPll38eq9dImF2l09sfFG3MpBwJg2a-sOnKk7OYoEbZbAw&currency=USD" data-sdk-integration-source="button-factory"></script>
    <script>
        paypal.Buttons({
            style: {
                shape: 'rect',
                color: 'silver',
                layout: 'vertical',
                label: 'paypal',

            },
            createOrder: function (data, actions) {
                return actions.order.create({
                    purchase_units: [{
                        amount: {
                            value: '1'
                        }
                    }]
                });
            },
            onApprove: function (data, actions) {
                return actions.order.capture().then(function (details) {
                    alert('Transaction completed by ' + details.payer.name.given_name + '!');
                });
            }
        }).render('#paypal-button-container');
    </script>*@


<script type="text/javascript" asp-location="Footer">
    function removeexternalassociation(itemId) {
        if (confirm('@T("Common.AreYouSure")')) {
            var postData = {
                id: itemId
            };
            addAntiForgeryToken(postData);
            $.ajax({
                cache: false,
                type: 'POST',
                url: '@Url.Action("RemoveExternalAssociation", "Customer")',
                data: postData,
                dataType: 'json',
                success: function (data) {
                    location.href = data.redirect;
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to delete');
                }
            });
        }
        return false;
    }
</script>

<script src="~/js/jquery.mask.min.js"></script>
@*<script src="~/Themes/Emporium/Content/intltelinput/js/intlTelInput.js"></script>*@
<script src="@Url.Content("~/Themes/Emporium/Content/intltelinput/js/intlTelInput.js")"></script>

<script type="text/javascript">
    $(document).ready(function () {
        document.getElementById('customer_attribute_1').style.textTransform = "uppercase";
        document.getElementById('customer_attribute_1').style.textTransform = "uppercase";
    });
    if (document.getElementById('customer_attribute_8_2').checked) {
        for (var i = 2; i < 7; i++) {
            $(document.getElementsByClassName('custom-attributes')[i]).show();
        }

        document.getElementById('customer_attribute_1_1').innerHTML = "R.I.F."
        $("#customer_attribute_5").css("display", "block");
        $("#customer_attribute_5_5").css("display", "block");
        $("#customer_attribute_10").css("display", "none");
        $("#customer_attribute_10_10").css("display", "none");
        $("#customer_attribute_11").css("display", "none");
        $("#customer_attribute_11_11").css("display", "none");
    }
    else {

        for (var i = 2; i < 7; i++) {
            $(document.getElementsByClassName('custom-attributes')[i]).show();
        }
        document.getElementById('customer_attribute_1_1').innerHTML = "Cédula";
        $("#customer_attribute_5").css("display", "none");
        $("#customer_attribute_5_5").css("display", "none");
        $("#customer_attribute_10").css("display", "block");
        $("#customer_attribute_10_10").css("display", "block");
        $("#customer_attribute_11").css("display", "block");
        $("#customer_attribute_11_11").css("display", "block");
    }

    window.onload = function () {
        format(document.getElementById("phone"));
        //format(document.getElementById("phone2"));
    }

    function format(VALOR) {
        var tlf = VALOR.value.slice(-10);
        var dialcode = VALOR.value.slice(0, -10);

        //var text = iti.getSelectedCountryData(dialCode: dialcode);
        iti.setNumber(dialcode);
        document.getElementById("phone2").value = tlf;

    }
    //$('#Phone').mask('(0000)000-0000');
    $('#phone2').mask('0000000000');

    var input = document.querySelector("#phone2");
    var iti = window.intlTelInput(input, {
        //nationalMode: false,
        preferredCountries: ['ve'],
        //utilsScript: "/Themes/Emporium/Content/intltelinput/js/utils.js",
    });

    $('#customer_attribute_8_1').click(function () {
        for (var i = 2; i < 7; i++) {
            $(document.getElementsByClassName('custom-attributes')[i]).show();
        }
        document.getElementById('customer_attribute_1_1').innerHTML = "Cédula";

        $("#customer_attribute_5").css("display", "none");
        $("#customer_attribute_5_5").css("display", "none");
        $("#customer_attribute_10").css("display", "block");
        $("#customer_attribute_10_10").css("display", "block");
        $("#customer_attribute_11").css("display", "block");
        $("#customer_attribute_11_11").css("display", "block");

        //Limpia los input
        $("#customer_attribute_5").removeClass("input-validation-error");
        //$("#customer_attribute_6").removeClass("input-validation-error");
        $("#customer_attribute_5Validate").removeClass("field-validation-error").addClass("field-validation-valid");
        document.getElementById("customer_attribute_5Validate").innerHTML = ""
        //$("#customer_attribute_6Validate").removeClass("field-validation-error").addClass("field-validation-valid");
        //document.getElementById("customer_attribute_6Validate").innerHTML = ""
        $("#customer_attribute_1").removeClass("input-validation-error");
        $("#customer_attribute_1Validate").removeClass("field-validation-error").addClass("field-validation-valid");
        document.getElementById("customer_attribute_1Validate").innerHTML = ""

        $("#customer_attribute_1").focus();
    })
    $('#customer_attribute_8_2').click(function () {
        for (var i = 2; i < 7; i++) {
            $(document.getElementsByClassName('custom-attributes')[i]).show();
        }

        $("#customer_attribute_5").css("display", "block");
        $("#customer_attribute_5_5").css("display", "block");
        $("#customer_attribute_10").css("display", "none");
        $("#customer_attribute_10_10").css("display", "none");
        $("#customer_attribute_11").css("display", "none");
        $("#customer_attribute_11_11").css("display", "none");

        document.getElementById('customer_attribute_1_1').innerHTML = "R.I.F."
        $("#customer_attribute_1").removeClass("input-validation-error");
        $("#customer_attribute_1Validate").removeClass("field-validation-error").addClass("field-validation-valid");
        document.getElementById("customer_attribute_1Validate").innerHTML = ""

        $("#customer_attribute_1").focus();

    })

</script>


<script type="text/javascript">
    function numberPhone() {
        //var regexp = /^((\(\d{4}\)?)|(\d{3}-))?\d{3}-\d{4}$/;
        var regexp = /^[0-9]{10}$/;
        //var text = iti.getSelectedCountryData();
        //var dial = text.dialCode;
        var inputtxt = document.getElementById('phone2').value;
        if (regexp.test(inputtxt)) {
            $("#Phone2").removeClass("input-validation-error");
            $("#PhoneValidate").removeClass("field-validation-error").addClass("field-validation-valid");
            document.getElementById("PhoneValidate").innerHTML = "";

            if (inputtxt.length < 11) {
                var text = iti.getSelectedCountryData();
                var dial = text.dialCode;

                var elementphone = "+" + dial + inputtxt;

                document.getElementById("phone").value = elementphone;

            }
        }
        else {
            $("#phone2").addClass("input-validation-error");
            $("#PhoneValidate").removeClass("field-validation-valid").addClass("field-validation-error");

            if (document.getElementById("phone2").value.length > 0 && document.getElementById("phone2").value.length != 10) {
                document.getElementById("PhoneValidate").innerHTML = "El Teléfono es inválido.";
            } else {
                if (document.getElementById("phone2").value.length == 0)
                    document.getElementById("PhoneValidate").innerHTML = "Se requiere el Teléfono.";
            }
        }
    }

    function alphanumeric(input, articulo) {
        var letters = /^([\s.]?[a-zA-ZñÑáéíóúÁÉÍÓÚ\s]+)+$/;
        if (input.value.match(letters)) {
            $("#" + input.id).removeClass("input-validation-error");
            $("#" + input.id + "Validate").removeClass("field-validation-error").addClass("field-validation-valid");
            document.getElementById(input.id + "Validate").innerHTML = ""
        }
        else {
            if (input.labels != null && input.labels.length > 0) {
                for (var j = 0; j < input.labels.length; j++) {
                    $("#" + input.id).addClass("input-validation-error");
                    $("#" + input.id + "Validate").removeClass("field-validation-valid").addClass("field-validation-error");
                    if ($("#" + input.id).val().length == 0) {
                        if (articulo.toLowerCase() == "el") {
                            document.getElementById(input.id + "Validate").innerHTML = "Se requiere el " + input.labels[j].innerHTML.slice(0, -1) + ".";
                        } else {
                            document.getElementById(input.id + "Validate").innerHTML = "Se requiere la " + input.labels[j].innerHTML.slice(0, -1) + ".";
                        }
                    } else {
                        if (articulo.toLowerCase() == "el") {
                            document.getElementById(input.id + "Validate").innerHTML = articulo + " " + input.labels[j].innerHTML.slice(0, -1) + " es inválido.";
                        } else {
                            document.getElementById(input.id + "Validate").innerHTML = articulo + " " + input.labels[j].innerHTML.slice(0, -1) + " es inválida.";
                        }
                    }
                }
            }
        }
    }

    function alphanumericAddress(input, articulo) {
        var letters = /^([\s.]?[a-zA-ZñÑáéíóúÁÉÍÓÚ0-9\d\#%&*'",.()-_/\s]+)+$/;
        if (input.value.match(letters)) {
            $("#" + input.id).removeClass("input-validation-error");
            $("#" + input.id + "Validate").removeClass("field-validation-error").addClass("field-validation-valid");
            document.getElementById(input.id + "Validate").innerHTML = ""
        }
        else {
            if (input.labels != null && input.labels.length > 0) {
                for (var j = 0; j < input.labels.length; j++) {
                    $("#" + input.id).addClass("input-validation-error");
                    $("#" + input.id + "Validate").removeClass("field-validation-valid").addClass("field-validation-error");
                    if ($("#" + input.id).val().length == 0) {
                        if (articulo.toLowerCase() == "el") {
                            document.getElementById(input.id + "Validate").innerHTML = "Se requiere el " + input.labels[j].innerHTML.slice(0, -1) + ".";
                        } else {
                            document.getElementById(input.id + "Validate").innerHTML = "Se requiere la " + input.labels[j].innerHTML.slice(0, -1) + ".";
                        }
                    } else {
                        if (articulo.toLowerCase() == "el") {
                            document.getElementById(input.id + "Validate").innerHTML = articulo + " " + input.labels[j].innerHTML.slice(0, -1) + " es inválido.";
                        } else {
                            document.getElementById(input.id + "Validate").innerHTML = articulo + " " + input.labels[j].innerHTML.slice(0, -1) + " es inválida.";
                        }
                    }
                }
            }
        }
    }

    function alphanumericCompany(input) {
        var letters = /^([\s.]?[a-zA-Z0-9\d\.\s]+)+$/;
        var numbers = /^[0-9]{6,8}$/;
        var numbersRif = /^[VEJGC]{1}[0-9]{7,9}$/;
        var numbersCed = /^[0-9]{6,8}$/;

        var isValid; //se usa para determinar el resultado del match.
        var esRequerido = true; //se usa para determinar si se requiere validar que el campo no este vacio.
        var validar = true; //se usa para determinar si toma en cuenta la validacion.
        var mensaje;
        switch (input.id) {
            case 'customer_attribute_1': {
                if (document.getElementById('customer_attribute_8_2').checked) {
                    isValid = input.value.toUpperCase().match(numbersRif);
                }
                else {
                    isValid = input.value.toUpperCase().match(numbersCed);
                }

                if (isValid == null) {
                    if (document.getElementById('customer_attribute_8_2').checked) {
                        mensaje = "Formato inválido de R.I.F. Por favor verifique (Ej. J123456789)";
                    } else {
                        mensaje = " Formato inválido de Cédula. Por favor verifique (Ej. 12345678)";
                    }

                }
                if (input.value.length == 0) {
                    if (document.getElementById('customer_attribute_8_2').checked) {
                        mensaje = " el R.I.F.";
                    } else {
                        mensaje = " la Cédula";
                    }
                }
                break;
            }
            case 'customer_attribute_5': {
                if (document.getElementById('customer_attribute_8_2').checked) {
                    isValid = input.value.match(letters);
                    if (isValid == null) {
                        if (input.value.length == 0) {
                            mensaje = " la Razón Social.";
                        }
                        else {
                            mensaje = "La Razón Social es inválida.";
                        }
                    }
                }
                break;

            }
            case 'customer_attribute_6': {
                if (document.getElementById('customer_attribute_8_2').checked) {
                    isValid = input.value.match(letters);
                    if (isValid == null) {
                        if (input.value.length == 0) {
                            mensaje = " la Razón Comercial.";
                        }
                        else {
                            mensaje = "La Razón Comercial es inválida.";
                        }
                    }
                }
                break;
            }
            case 'customer_attribute_10': {
                if (document.getElementById('customer_attribute_8_1').checked) {
                    isValid = input.value.match(letters);
                    if (isValid == null) {
                        if (input.value.length == 0) {
                            mensaje = " el Nombre.";
                        }
                        else {
                            mensaje = "Nombre inválido.";
                        }
                    }
                }
                break;
            }
            case 'customer_attribute_11': {
                if (document.getElementById('customer_attribute_8_1').checked) {
                    isValid = input.value.match(letters);
                    if (isValid == null) {
                        if (input.value.length == 0) {
                            mensaje = " el Apellido.";
                        }
                        else {
                            mensaje = "Apellido inválido.";
                        }
                    }
                }
                break;
            }
            default: {
                if (input.value.length > 0) {
                    isValid = input.value.match(numbers);
                    if (isValid == null) {
                        if (input.value.length == 8) {
                            mensaje = "El personal autorizado es inválido. Solo se admite el número de cédula.";
                        } else
                            if (input.value.length < 6) {
                                mensaje = "Mínimo 6 carácteres";
                            } else {
                                if (input.value.length > 8) {
                                    mensaje = "Máximo 8 carácteres";
                                }
                            }
                    }
                    esRequerido = false;
                } else {
                    validar = false;
                }
                break;
            }
        }
        if (validar) {
            if (isValid != null) {
                $("#" + input.id).removeClass("input-validation-error");
                $("#" + input.id + "Validate").removeClass("field-validation-error").addClass("field-validation-valid");
                document.getElementById(input.id + "Validate").innerHTML = ""
            }
            else {
                $("#" + input.id).addClass("input-validation-error");
                $("#" + input.id + "Validate").removeClass("field-validation-valid").addClass("field-validation-error");
                if (esRequerido && document.getElementById(input.id).value.length == 0) {
                    document.getElementById(input.id + "Validate").innerHTML = "Se requiere " + mensaje;
                } else {
                    document.getElementById(input.id + "Validate").innerHTML = mensaje;
                }
            }
        }
    }

    function checkForm() {

        searchinputcOMPANY();
        document.getElementById("customer_attribute_8_1").removeAttribute("disabled");
        document.getElementById("customer_attribute_8_2").removeAttribute("disabled");

        var testElements = document.getElementsByClassName('input-validation-error');
        if (testElements.length > 0) {
            return false;
        }
        return true;
    }


    function searchinputcOMPANY() {

        if (document.getElementById('customer_attribute_8_2').checked) {
            var element5 = document.getElementById("customer_attribute_5").value;
            if (element5.length == 0) {
                $("#customer_attribute_5").addClass("input-validation-error");
                $("#customer_attribute_5Validate").removeClass("field-validation-valid").addClass("field-validation-error");
                document.getElementById("customer_attribute_5Validate").innerHTML = "La Razón Social es requerida"
            }


        } else {
            document.getElementById("customer_attribute_5").value = "";
            var element5 = document.getElementById("customer_attribute_10").value;
            if (element5.length == 0) {
                $("#customer_attribute_10").addClass("input-validation-error");
                $("#customer_attribute_10Validate").removeClass("field-validation-valid").addClass("field-validation-error");
                document.getElementById("customer_attribute_10Validate").innerHTML = "El nombre es requerido"
            }

            var element6 = document.getElementById("customer_attribute_11").value;
            if (element6.length == 0) {
                $("#customer_attribute_11").addClass("input-validation-error");
                $("#customer_attribute_11Validate").removeClass("field-validation-valid").addClass("field-validation-error");
                document.getElementById("customer_attribute_11Validate").innerHTML = "El apellido es requerido"
            }


            //document.getElementById("customer_attribute_3").value = "";
            //document.getElementById("customer_attribute_4").value = "";
            document.getElementById("customer_attribute_5").value = "";
            //document.getElementById("customer_attribute_6").value = "";


            var inputtxt = document.getElementById('phone2').value;
            if (inputtxt.length < 11) {
                var text = iti.getSelectedCountryData();
                var dial = text.dialCode;

                var elementphone = "+" + dial + inputtxt;
                document.getElementById("phone").value = elementphone;
            }
        }
    }
</script>
